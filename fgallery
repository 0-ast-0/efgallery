#!/usr/bin/env perl
# fgallery: a modern, minimalist javascript photo gallery
# Copyright(c) 2003-2013 by wave++ "Yuri D'Elia" <wavexx@thregr.org>
# Distributed under GPL2 (see COPYING) WITHOUT ANY WARRANTY.
use strict;
use warnings;

use locale;
use utf8;
require Encode;
require encoding;

use Getopt::Long;
use File::Basename qw{fileparse};
use JSON::PP qw{encode_json};
use File::Path qw{make_path remove_tree};
use Date::Parse qw{str2time};
use File::Glob qw{:globally :nocase};

# defaults
my $mode = 0644;
my $slim = 0;
my $ofile = 0;
my $orient = 1;
my $timesort = 1;
my @exts = ("jpg", "png", "tiff");
my $ext = "jpg";
my @minthumb = (150, 112);
my @maxthumb = (267, 200);
my @maxfull = (1600, 1200);
my $maxq = 100;
my $imgq = 90;
my @imflags = ();
my $fullpano = 1;
my $nodown = 0;
my $panort = 2.;


# support functions
sub fatal
{
  print(STDERR "error: " . join(" ", @_) . "\n");
  exit(1);
}


sub sys
{
  my @cmd = @_;

  my $fd;
  unless(open($fd, '-|', @cmd)) {
    fatal("cannot execute \"$cmd[0]\"");
  }

  local $/ = undef;
  my $out = <$fd>;

  unless(close($fd)) {
    fatal("command \"@cmd\" failed");
  }

  return split("\n", $out);
}


sub get_props
{
  my $file = shift;
  my @cmd = ('identify', '-format',
	     '%[*]%[exif:*]width=%w\nheight=%h\nformat=%m',
	     $file);
  return map { /^([^=]+)=(.*)/ } sys(@cmd);
}



# options
sub parse_wh
{
  my ($opt, $spec) = @_;
  my ($w, $h) = ($spec =~ /^(\d+)x(\d+)$/);
  unless(defined($w) && defined($h)) {
    fatal("bad WxH specification in option $opt");
  }
  return (int($w), int($h));
}


sub print_help()
{
  print(STDERR qq{Usage: $0 [options] input-dir output-dir [album name]

  -h, --help		this help
  -s			slim output (no original files and downloads)
  -i			include individual originals
  -o			do not auto-orient
  -t			do not time-sort
  -p			do not automatically include full-sized panoramas
  -d			do not generate a full album download
  --min-thumb WxH	minimum thumbnail size ($minthumb[0]x$minthumb[1])
  --max-thumb WxH	maximum thumbnail size ($maxthumb[0]x$maxthumb[1])
  --max-full WxH	maximum full image size ($maxfull[0]x$maxfull[1])
  --quality Q		preview image quality (0-100, currently: $imgq)
});
}


# main program
my $help = 0;
my $locale = encoding::_get_locale_encoding();

my ($ret, @ARGS) = GetOptions('help|h' => \$help,
	   's' => sub { $slim = 1; },
	   'i' => sub { $ofile = 1; },
	   'o' => sub { $orient = 0; },
	   't' => sub { $timesort = 0; },
	   'p' => sub { $fullpano = 0; },
	   'd' => sub { $nodown = 1; },
	   'min-thumb=s' => sub { @minthumb = parse_wh(@_); },
	   'max-thumb=s' => sub { @maxthumb = parse_wh(@_); },
	   'max-full=s' => sub { @maxfull = parse_wh(@_); },
	   'quality=i' => sub { $imgq = $_[1]; });

if(@ARGV < 2 || @ARGV > 3 || $help || !$ret)
{
  print_help();
  exit(2);
}
my $dir = $ARGV[0];
my $out = $ARGV[1];
my $name = $ARGV[2] || undef;

# check paths
if(!-d $dir) {
  fatal("input directory \"$dir\" does not exist");
} elsif(!-d $out) {
  fatal("output directory \"$out\" does not exist (should be a template copy)");
}

# check tools
if(system("identify 2>&1 >/dev/null") || system("convert 2>&1 >/dev/null")) {
  fatal("cannot run \"identify\" or \"convert\" (check if ImageMagick is installed)");
}
if(system("zip -h 2>&1 >/dev/null")) {
  fatal("cannot run \"zip\" (check if zip is installed)");
}

my $exiftrancmd;
if(!system("exiftran -h 2>&1 >/dev/null")) {
  $exiftrancmd = "exiftran -aip";
} elsif(!system("exifautotran 2>&1 >/dev/null")) {
  $exiftrancmd = "exifautotran";
} else {
  fatal("cannot execute exiftran or exifautotran for lossless JPEG autorotation");
}

# derived arguments
my $backblur = int(($minthumb[0] + $minthumb[1]) / 2 * 0.1);
my @backsize = (int($minthumb[0] * 4), int($minthumb[1] * 3));

# cleanup target paths
for my $path("$out/thumbs", "$out/blurs", "$out/imgs", "$out/files")
{
  remove_tree($path);
  make_path($path);
}

# processing
my @data;
my $ostamp = 0;
my $amp = 0;
for my $file(glob("$dir/*.{" . join(",", @exts) . "}"))
{
  my $base = fileparse(Encode::decode($locale, $file), qr/\.[^.]*$/);
  print(STDERR "$base ...\n");
  my %props = get_props($file);

  # sanitize file name
  $base =~ s/[^\w]/_/gu;
  my $fbase = "$base.$ext";
  my $ffile = "files/$fbase";
  my $fout = "$out/$ffile";
  for(my $c = 0; -f $fout; ++$c)
  {
    $fbase = "${base}_$c.$ext";
    $ffile = "files/$fbase";
    $fout = "$out/$ffile";
  }

  my $fimg = "imgs/$fbase";
  my $fthumb = "thumbs/$fbase";
  my $fblur = "blurs/$fbase";

  my @flags = ();
  push(@flags, "-auto-orient") if($orient);
  push(@flags, '-quality', $imgq);

  if($maxq != 100 || $props{format} ne "JPEG")
  {
    # lossy path
    sys('convert', @flags, @imflags, '-quality', $maxq, $file, $fout);
    chmod($mode, $fout);
    sys('touch', '-r', $file, $fout);
  }
  else
  {
    # lossless path
    sys('cp', '-p', $file, $fout);
    chmod($mode, $fout);
    sys("$exiftrancmd $fout 2>/dev/null") if($orient);
  }

  # avoid conversion to string
  my @minthumb = @minthumb;
  my @maxthumb = @maxthumb;
  my @backsize = @backsize;

  # generate images
  my @sfile = ($props{width}, $props{height});
  my @sthumb = sys('convert', @flags, @imflags,
		   '-thumbnail', "$minthumb[0]x$minthumb[1]^",
		   '-gravity', 'center',
		   '-crop', "$maxthumb[0]x$maxthumb[1]+0x0",
		   '-print', '%w\n%h',
		   $file, "$out/$fthumb");
  my @simg = sys('convert', @flags, @imflags,
		 '-geometry', "$maxfull[0]x$maxfull[1]>",
		 '-print', '%w\n%h',
		 $file, "$out/$fimg");
  sys('convert', @imflags, '-quality', '90',
      '-virtual-pixel',  'Mirror',
      '-gaussian-blur', "0x$backblur",
      '-scale', "$backsize[0]x$backsize[1]",
      "$out/$fthumb", "$out/$fblur");

  # rolling mp average
  my $mp = ($sfile[0] * $sfile[1] / 1e6);
  $amp += ($mp - $amp) / (@data + 1);

  my %fdata;
  $fdata{props} = \%props;
  $fdata{img} = [$fimg, [map { int } @simg]];
  $fdata{thumb} = [$fthumb, [map { int } @sthumb]];
  $fdata{file} = [$ffile, [map { int } @sfile]];
  $fdata{blur} = $fblur;

  unless(my $idate = $props{'exif:DateTimeOriginal'} || $props{'exif:DateTime'})
  {
    # no date available, cheat by using the previous timestamp
    $fdata{stamp} = $ostamp = $ostamp + 1;
  }
  else
  {
    $fdata{date} = $idate;
    $fdata{stamp} = $ostamp = str2time($idate);
  }

  push(@data, \%fdata);
}

if($timesort) {
  @data = sort { ($a->{stamp} // 0) <=> ($b->{stamp} // 0); } @data;
}

# generate zip file
my $fdownload = undef;
if(!$nodown && !$slim)
{
  $fdownload = "files/album.zip";
  sys('zip', '-q9j', "$out/$fdownload", map { "$out/$_->{'file'}[0]" } @data);
}

# remove unnecessary raw files
if(!$ofile || $slim)
{
  for my $fdata(@data)
  {
    my $file = "$out/$fdata->{'file'}[0]";
    my $keep = !$slim && $ofile;

    if(!$slim && !$keep && $fullpano)
    {
      my ($x, $y) = @{$fdata->{file}[1]};
      my $mp = ($x * $y / 1e6);

      # try to see if the source file is just a crop of the original
      my $ox = $fdata->{props}{'exif:PixelXDimension'} // 0;
      my $oy = $fdata->{props}{'exif:PixelYDimension'} // 0;
      my $omp = ($ox * $oy / 1e6);

      if($mp >= $omp && $mp > $amp && abs($x / $y) >= $panort) {
	$keep = 1;
      }
    }

    if(!$keep)
    {
      unlink($file);
      delete($fdata->{file});
    }
  }
}

# only attempt to remove the directory (if empty)
rmdir("$out/files");

# generate json
my %json;
$json{name} = $name if($name);
$json{download} = $fdownload if($fdownload);
$json{blur} = \@backsize;
$json{thumb} = { min => \@minthumb, max => \@maxthumb };

foreach my $fdata(@data)
{
  my %data;
  foreach('img', 'thumb', 'file', 'blur', 'date', 'stamp') {
    if(defined($fdata->{$_})) {
      $data{$_} = $fdata->{$_};
    }
  }
  push(@{$json{data}}, \%data);
}

open(JSON, ">$out/data.json");
print(JSON encode_json(\%json));
close(JSON);
