#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use File::Basename qw{fileparse};
use JSON::PP qw{encode_json};
use File::Path qw{make_path remove_tree};
use Date::Parse qw{str2time};
use File::Glob qw(:globally :nocase);

# defaults
my $mode = '0644';
my $slim = 0;
my $ofile = 0;
my $orient = 1;
my $timesort = 1;
my @exts = ("jpg", "png");
my $ext = "jpg";
my @minthumb = (150, 112);
my @maxthumb = (150, 200);
my @maxfull = (1600, 1200);
my $maxq = 100;
my $imgq = 90;
my $imflags = "";
my $fullpano = 1;


# support functions
sub fatal
{
  print(STDERR "error: " . join(" ", @_) . "\n");
  exit(1);
}


sub sys
{
  my $cmd = shift;
  if(system($cmd)) {
    fatal("command \"$cmd\" failed");
  }
}


sub get_wh
{
  my $file = shift;
  chomp(my $xy = qx{identify -format '%wx%h' '$file'});
  return ($xy =~ /^(\d+)x(\d+)$/);
}



# options
sub parse_wh
{
  my ($opt, $spec) = @_;
  my ($w, $h) = ($spec =~ /^(\d+)x(\d+)$/);
  unless(defined($w) && defined($h)) {
    fatal("bad WxH specification in option $opt");
  }
  return ($w, $h);
}


sub print_help()
{
  print(STDERR qq{Usage: $0 [options] input-dir output-dir [album name]

  -h, --help		this help
  -s			slim output (no original files and downloads)
  -i			include individual originals
  -o			do not auto-orient
  -t			do not time-sort
  -p			do not automatically include full-sized panoramas
  --min-thumb WxH	minimum thumbnail size ($minthumb[0]x$minthumb[1])
  --max-thumb WxH	maximum thumbnail size ($maxthumb[0]x$maxthumb[1])
  --max-full WxH	maximum full image size ($maxfull[0]x$maxfull[1])
  --quality Q		preview image quality (0-100, currently: $imgq)
});
}


# main program
my $help = 0;

my ($ret, @ARGS) = GetOptions('help|h' => \$help,
	   's' => sub { $slim = 1; },
	   'i' => sub { $ofile = 1; },
	   'o' => sub { $orient = 0; },
	   't' => sub { $timesort = 0; },
	   'p' => sub { $fullpano = 0; },
	   'min-thumb=s' => sub { @minthumb = parse_wh(@_); },
	   'max-thumb=s' => sub { @maxthumb = parse_wh(@_); },
	   'max-full=s' => sub { @maxfull = parse_wh(@_); },
	   'quality=i' => sub { $imgq = $_[1]; });

if(@ARGV < 2 || @ARGV > 3 || $help || !$ret)
{
  print_help();
  exit(2);
}
my $dir = $ARGV[0];
my $out = $ARGV[1];
my $name = $ARGV[2] || undef;

# check paths
if(!-d $dir) {
  fatal("input directory \"$dir\" does not exist");
} elsif(!-d $out) {
  fatal("output directory \"$out\" does not exist (should be a template copy)");
}

# derived arguments
my @backblur = ($minthumb[0] / 2, $minthumb[1] / 2);
my @backsize = (500, 500);

# cleanup target paths
for my $path("$out/thumbs", "$out/blurs", "$out/imgs", "$out/files")
{
  remove_tree($path);
  make_path($path);
}

my @data;
my $ostamp = 0;
for my $file(glob("$dir/*.{" . join(",", @exts) . "}"))
{
  my $base = fileparse($file, qr/\.[^.]*$/);
  print(STDERR "$base ...\n");

  my $fbase = "$base.$ext";
  my $fimg = "imgs/$fbase";
  my $fthumb = "thumbs/$fbase";
  my $fblur = "blurs/$fbase";
  my $ffile = "files/$fbase";

  my $flags = "";
  $flags .= " -auto-orient" if($orient);

  chomp(my $ifmt = qx{identify -format '%m' '$file'});
  chomp(my $idate = qx{identify -format '%[EXIF:DateTimeOriginal]' '$file'});

  if($maxq != 100 || $ifmt ne "JPEG")
  {
    # lossy path
    sys(qq{convert $flags $imflags -quality '$maxq' '$file' '$out/$ffile'});
    sys(qq{chmod '$mode' '$out/$ffile'});
    sys(qq{touch -r '$file' '$out/$ffile'});
  }
  else
  {
    # lessless path
    sys(qq{cp -p '$file' '$out/$ffile'});
    sys(qq{chmod '$mode' '$out/$ffile'});
    sys(qq{exiftran -aip '$out/$ffile' >/dev/null 2>&1}) if($orient);
  }

  # generate images
  my @minthumb = @minthumb;
  my @maxthumb = @maxthumb;
  sys(qq{convert $flags $imflags -quality '$imgq' \\
      -thumbnail '$minthumb[0]x$minthumb[1]^' \\
      -gravity center -crop '$maxthumb[0]x$maxthumb[1]+0x0' \\
      '$file' '$out/$fthumb'});
  sys(qq{convert $imflags -quality 90 \\
      -blur '$backblur[0]x$backblur[1]' -scale '$backsize[0]x$backsize[1]' \\
      '$out/$fthumb' '$out/$fblur'});
  sys(qq{convert $flags $imflags -quality '$imgq' \\
      -geometry '$maxfull[0]x$maxfull[1]' \\
      '$file' '$out/$fimg'});

  # sizes
  my @simg = get_wh("$out/$fimg");
  my @sthumb = get_wh("$out/$fthumb");
  my @sfile = get_wh("$file");

  my %fdata;
  $fdata{'img'} = [ $fimg, \@simg ];
  $fdata{'thumb'} = [ $fthumb, \@sthumb ];
  $fdata{'file'} = [ $ffile, \@sfile ];
  $fdata{'blur'} = $fblur;
  if(!$idate)
  {
    # no date available, cheat by using the previous timestamp
    $fdata{'stamp'} = $ostamp = $ostamp + 1;
  }
  else
  {
    $fdata{'date'} = $idate;
    $fdata{'stamp'} = $ostamp = str2time($idate);
  }

  push(@data, \%fdata);
}

if($timesort) {
  @data = sort { ($a->{'stamp'} // 0) <=> ($b->{'stamp'} // 0); } @data;
}

my $fdownload = "files/album.zip";
if(!$slim)
{
  my @files;
  for my $fdata(@data) {
    push(@files, "'$out/$fdata->{'file'}[0]'");
  }
  my $flist = join(" ", @files);
  sys(qq{zip -q9j '$out/$fdownload' $flist});
}
if(!$ofile || $slim)
{
  for my $fdata(@data)
  {
    my $keep = 0;

    if($fullpano) {
      $keep = (abs($fdata->{'file'}[1][0] / $fdata->{'file'}[1][1]) >= 2);
    }

    if(!$keep)
    {
      unlink("$out/$fdata->{'file'}[0]");
      delete($fdata->{'file'});
    }
  }
}
if($slim)
{
  $fdownload = undef;
  remove_tree("$out/files");
}

# output
my %json;
$json{'name'} = $name if($name);
$json{'download'} = $fdownload if($fdownload);
$json{'thumb'} = \@maxthumb;
$json{'data'} = \@data;

open(JSON, ">$out/data.json");
print(JSON encode_json(\%json));
close(JSON);
