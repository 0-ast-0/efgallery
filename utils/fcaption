#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals, generators, print_function

import os, sys
import argparse
import locale
import glob

from PyQt4 import QtCore, QtGui

APP_DESC = "fgallery image caption editor"
ENCODING = locale.getpreferredencoding()
FILE_EXT = ["jpg", "jpeg", "png", "tif", "tiff"]

if sys.version_info.major < 3:
    str = unicode


class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setWindowTitle(APP_DESC)

        # construct UI
        widget = QtGui.QWidget()
        self.setCentralWidget(widget)
        gridLayout = QtGui.QGridLayout()
        gridLayout.setMargin(6)
        widget.setLayout(gridLayout)
        self.image = QtGui.QLabel("No image")
        self.image.setMinimumSize(640, 425)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        self.pixmap = QtGui.QPixmap()
        self.image.setSizePolicy(sizePolicy)
        self.image.setAlignment(QtCore.Qt.AlignCenter)
        gridLayout.addWidget(self.image, 0, 0, 1, 1)
        self.list_files = QtGui.QListWidget()
        gridLayout.addWidget(self.list_files, 0, 1, 2, 1)
        horizontalLayout = QtGui.QHBoxLayout()
        formLayout = QtGui.QFormLayout()
        formLayout.setLabelAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        formLayout.setWidget(0, QtGui.QFormLayout.LabelRole, QtGui.QLabel("Title:"))
        self.edit_title = QtGui.QLineEdit()
        formLayout.setWidget(0, QtGui.QFormLayout.FieldRole, self.edit_title)
        formLayout.setWidget(1, QtGui.QFormLayout.LabelRole, QtGui.QLabel("Description:"))
        self.edit_desc = QtGui.QPlainTextEdit()
        self.edit_desc.setMaximumSize(16777215, 57)
        formLayout.setWidget(1, QtGui.QFormLayout.FieldRole, self.edit_desc)
        horizontalLayout.addLayout(formLayout)
        verticalLayout = QtGui.QVBoxLayout()
        verticalLayout.setSizeConstraint(QtGui.QLayout.SetMinimumSize)
        self.btn_next = QtGui.QPushButton("&Next")
        verticalLayout.addWidget(self.btn_next)
        self.btn_undo = QtGui.QPushButton("&Undo")
        verticalLayout.addWidget(self.btn_undo)
        self.btn_prev = QtGui.QPushButton("&Previous")
        verticalLayout.addWidget(self.btn_prev)
        horizontalLayout.addLayout(verticalLayout)
        gridLayout.addLayout(horizontalLayout, 1, 0, 1, 1)

        # signals
        self.list_files.itemActivated.connect(self.on_list)
        self.btn_next.clicked.connect(self.on_next)
        self.btn_prev.clicked.connect(self.on_prev)
        self.btn_undo.clicked.connect(self.on_undo)
        self.edit_title.textEdited.connect(self.on_changed)
        self.edit_desc.textChanged.connect(self.on_changed)

        # initial state
        self.files = list()
        self.current = 0
        self.modified = False

    def on_next(self, ev):
        if self.modified: self.save()
        self.load((self.current + 1) % len(self.files))

    def on_prev(self, ev):
        if self.modified: self.save()
        self.load((self.current - 1) % len(self.files))

    def on_list(self, ev):
        if self.modified: self.save()
        self.load(self.list_files.currentRow())

    def on_undo(self, ev):
        self.load(self.current)

    def set_files(self, files):
        self.files = list(files)
        self.list_files.clear()
        for path in files:
            self.list_files.addItem(os.path.basename(path))
        if len(files) < 2:
            self.list_files.hide()
            self.btn_next.setEnabled(False)
            self.btn_prev.setEnabled(False)
        else:
            self.list_files.show()
            self.btn_next.setEnabled(True)
            self.btn_prev.setEnabled(True)
        self.load(0)

    def on_changed(self, *_):
        self.modified = True

    def on_resize(self):
        if self.pixmap.isNull(): return
        pixmap = self.pixmap.scaled(self.image.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
        self.image.setPixmap(pixmap)

    def load(self, idx):
        self.current = idx
        self.list_files.setCurrentRow(idx)

        path = self.files[idx]
        self.pixmap = QtGui.QPixmap(path)
        if self.pixmap.isNull():
            self.image.setPixmap(self.pixmap)
            self.image.setText('Cannot load {}'.format(path))
            self.edit_title.setEnabled(False)
            self.edit_desc.setEnabled(False)
            return

        self.image.clear()
        self.on_resize()

        self.edit_title.clear()
        self.edit_desc.clear()
        self.edit_title.setEnabled(True)
        self.edit_desc.setEnabled(True)

        base, _ = os.path.splitext(path)
        txt = base + '.txt'
        if os.path.isfile(txt):
            data = open(txt, 'rb').read().decode(ENCODING).split('\n', 1)
            if len(data) > 0:
                self.edit_title.setText(data[0].strip())
            if len(data) > 1:
                self.edit_desc.setPlainText(data[1].strip())

        self.modified = False
        self.edit_title.setFocus()

    def save(self):
        title = str(self.edit_title.text()).strip()
        desc = str(self.edit_desc.toPlainText()).strip()
        base, _ = os.path.splitext(self.files[self.current])
        txt = base + '.txt'
        if len(title) + len(desc) == 0:
            if os.path.isfile(txt):
                os.remove(txt)
        else:
            data = title + '\n' + desc
            open(txt, 'wb').write(data.encode(ENCODING))

    def resizeEvent(self, ev):
        super(MainWindow, self).resizeEvent(ev)
        self.on_resize()

    def closeEvent(self, ev):
        if self.modified: self.save()
        super(MainWindow, self).closeEvent(ev)


# main application
class Application(QtGui.QApplication):
    def __init__(self, args):
        super(Application, self).__init__(args)

        # command-line flags
        ap = argparse.ArgumentParser(description=APP_DESC)
        ap.add_argument('files', metavar="image", nargs='+',
                        help='image or directory to caption')
        args = ap.parse_args(map(str, args[1:]))

        # expand directories to files
        files = []
        for path in args.files:
            if not os.path.isdir(path):
                files.append(path)
            else:
                for tmp in os.listdir(path):
                    tmp = os.path.join(path, tmp)
                    ext = os.path.splitext(tmp)[1]
                    if ext: ext = ext[1:].lower()
                    if os.path.isfile(tmp) and ext in FILE_EXT:
                        files.append(tmp)
        if not files:
            print("no files to caption", file=sys.stderr)
            sys.exit(1)

        # initialize
        self.main_window = MainWindow()
        self.main_window.show()
        self.main_window.set_files(files)

if __name__ == '__main__':
    app = Application(sys.argv)
    sys.exit(app.exec_())
